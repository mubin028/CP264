------------------------------
Start: Testing Linked List insert:

-------- Testing Insert_List ------- 
Creating an empty linked list
NULL

Inserting first element at index 0
Successful Insertion? 1
[1](1000010001,10)-->NULL

Inserting second element at index 1
Successful Insertion? 1
[1](1000010001,10)-->[2](1000010002,20)-->NULL

Inserting third element at index 1
Successful Insertion? 1
[1](1000010001,10)-->[3](1000010003,30)-->[2](1000010002,20)-->NULL

Inserting fourth element at index 2
Successful Insertion? 1
[1](1000010001,10)-->[3](1000010003,30)-->[4](1000010004,40)-->[2](1000010002,20)-->NULL

Inserting fifth element at index 0
Successful Insertion? 1
[4](1000010004,40)-->[1](1000010001,10)-->[3](1000010003,30)-->[4](1000010004,40)-->[2](1000010002,20)-->NULL

Inserting sixth element at index 2
Successful Insertion? 1
[4](1000010004,40)-->[1](1000010001,10)-->[6](1000010006,60)-->[3](1000010003,30)-->[4](1000010004,40)-->[2](1000010002,20)-->NULL

Inserting seventh element at index 6
Successful Insertion? 1
[4](1000010004,40)-->[1](1000010001,10)-->[6](1000010006,60)-->[3](1000010003,30)-->[4](1000010004,40)-->[2](1000010002,20)-->[7](1000010007,70)-->NULL

Inserting at invalid index (index = 100)
Error(insert_list): index out of range
Successful Insertion? 0
[4](1000010004,40)-->[1](1000010001,10)-->[6](1000010006,60)-->[3](1000010003,30)-->[4](1000010004,40)-->[2](1000010002,20)-->[7](1000010007,70)-->NULL

destroy linked list

End: Testing Linked List insert
------------------------------

------------------------------
Start: Testing List pop function:

Create Linked list with 10 elements
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Deleting Element 0:
[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Deleting Element 5:
[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Deleting Element 1:
[11](1000010001,2)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Deleting last element (index = 6):
[11](1000010001,2)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[17](1000010007,8)-->[18](1000010008,9)-->NULL

Deleting using invalid index (index = 6)
Error(pop_list): index out of range
[11](1000010001,2)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[17](1000010007,8)-->[18](1000010008,9)-->NULL

Calling delete (index = 0) six times
NULL

delete from an empty list (index = 0)
Error(pop_list): list is empty
NULL

destroy linked list

End: Testing List pop function
------------------------------

------------------------------
Start: Testing Linked List sub_list function:

Case 1: An Empty List - Get List [0:5]
Error(sub_list): Linked list is empty
Original List: 
NULL
New List: 
NULL

Create a linked list with 10 random processes:
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Case 2: illegal start values:
getList[-1,5]:
Error(sub_list): Invalid start index
NULL
getList[10,15]:
Error(sub_list): Invalid start index
NULL

Case 3: illegal end values:
getList[2,-1]:
Error(sub_list): Invalid end index
NULL
getList[2,10]:
Error(sub_list): Invalid end index
NULL
getList[4,2]:
Error(sub_list): Invalid end index
NULL

Case 3: partial List: getList[2,5]:
[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->NULL

Case 4: single item list: getList[2,2]:
[12](1000010002,3)-->NULL

Case 5: full list: getList[0,9]:
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

destroy linked list

End: Testing sub_list function
------------------------------

------------------------------
Start: Testing Linked List cut_list function:

Case 1: An Empty List -  cut [0:5]
Error(cut_list): Linked List is empty
NULL

Create a linked list with 10 random processes:
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Case 2: illegal start values:
cut[-1,5]:
Error(cut_list): Invalid start index
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL
cut[10,15]:
Error(cut_list): Invalid start index
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Case 2: illegal end values:
cut[2,-1]:
Error(cut_list): Invalid end index
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL
cut[2,10]:
Error(cut_list): Invalid end index
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL
cut[4,2]:
Error(cut_list): Invalid end index
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Case 3: cut[2,5]:
[10](1000010000,1)-->[11](1000010001,2)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Case 4: cut[2,2]:
[10](1000010000,1)-->[11](1000010001,2)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

Case 5: cut[0,4]:
NULL

destroy linked list

End: Testing List cut function
------------------------------

------------------------------
Start: Testing Linked List swap_list function:

NULL
swap_list(list,1,2):
Error(swap_list): list is empty

Create a linked list with 10 random processes:
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

swap_list(list,-1,5):
Error (swap_list): Invalid value of i or j
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

swap_list(list,2,2):
[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

swap_list(list,1,2):
[10](1000010000,1)-->[12](1000010002,3)-->[11](1000010001,2)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

swap_list(list,1,3):
[10](1000010000,1)-->[13](1000010003,4)-->[11](1000010001,2)-->[12](1000010002,3)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

swap_list(list,0,1):
[13](1000010003,4)-->[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

swap_list(list,0,5):
[15](1000010005,6)-->[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[14](1000010004,5)-->[13](1000010003,4)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL

swap_list(list,6,9):
[15](1000010005,6)-->[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[14](1000010004,5)-->[13](1000010003,4)-->[19](1000010009,10)-->[17](1000010007,8)-->[18](1000010008,9)-->[16](1000010006,7)-->NULL

swap_list(list,8,9):
[15](1000010005,6)-->[10](1000010000,1)-->[11](1000010001,2)-->[12](1000010002,3)-->[14](1000010004,5)-->[13](1000010003,4)-->[19](1000010009,10)-->[17](1000010007,8)-->[16](1000010006,7)-->[18](1000010008,9)-->NULL

destroy linked list

End: Testing List swap_list function
------------------------------

------------------------------
Start: Testing Linked List intersection_list function:

list1 = NULL
list2 = NULL
list3 = NULL

list1 = NULL
list2 = [10](1000010000,1)-->NULL
list3 = NULL

list1 = [11](1000010001,2)-->NULL
list2 = [10](1000010000,1)-->NULL
list3 = NULL

list1 = [11](1000010001,2)-->[12](1000010002,3)-->NULL
list2 = [10](1000010000,1)-->[12](1000010002,3)-->NULL
list3 = [12](1000010002,3)-->NULL

list1 = [11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->NULL
list2 = [10](1000010000,1)-->[12](1000010002,3)-->NULL
list3 = [12](1000010002,3)-->NULL

list1 = [11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->NULL
list2 = [10](1000010000,1)-->[12](1000010002,3)-->[14](1000010004,5)-->NULL
list3 = [12](1000010002,3)-->[14](1000010004,5)-->NULL

list1 = [11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->NULL
list2 = [10](1000010000,1)-->[12](1000010002,3)-->[14](1000010004,5)-->NULL
list3 = [12](1000010002,3)-->[14](1000010004,5)-->NULL

list1 = [11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->NULL
list2 = [10](1000010000,1)-->[12](1000010002,3)-->[14](1000010004,5)-->[16](1000010006,7)-->NULL
list3 = [12](1000010002,3)-->[14](1000010004,5)-->[16](1000010006,7)-->NULL

list1 = [11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->NULL
list2 = [10](1000010000,1)-->[12](1000010002,3)-->[14](1000010004,5)-->[16](1000010006,7)-->NULL
list3 = [12](1000010002,3)-->[14](1000010004,5)-->[16](1000010006,7)-->NULL

list1 = [11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->NULL
list2 = [10](1000010000,1)-->[12](1000010002,3)-->[14](1000010004,5)-->[16](1000010006,7)-->[18](1000010008,9)-->NULL
list3 = [12](1000010002,3)-->[14](1000010004,5)-->[16](1000010006,7)-->[18](1000010008,9)-->NULL

list1 = [11](1000010001,2)-->[12](1000010002,3)-->[13](1000010003,4)-->[14](1000010004,5)-->[15](1000010005,6)-->[16](1000010006,7)-->[17](1000010007,8)-->[18](1000010008,9)-->[19](1000010009,10)-->NULL
list2 = [10](1000010000,1)-->[12](1000010002,3)-->[14](1000010004,5)-->[16](1000010006,7)-->[18](1000010008,9)-->NULL
list3 = [12](1000010002,3)-->[14](1000010004,5)-->[16](1000010006,7)-->[18](1000010008,9)-->NULL


End: Testing List intersection_list function
------------------------------

