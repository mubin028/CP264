/*
 * ---------------------------------
 * Student Name:Mubin Qureshi
 * Student ID:180181900
 * Student Email:qure1900@mylaurier.ca
 * ---------------------------------
 */

# include <stdio.h>
# include <stdlib.h>
# include <assert.h>
# include "list.h"

/**
 * ------------------------------------------------------------
 * Parameters: 	d - a data item (Data*)
 * 				n - pointer to next node (Node*)
 * Returns: 	new node (Node*)
 * Description:	Creates a new node using the given data
 * Asserts:		data is not NULL
 * ------------------------------------------------------------
 */
Node* create_node(Data *d, Node *n) {
	assert(d);
	Node* node = (Node*)malloc(sizeof(node));
	node->data = copy_data(d);
	node->next = n;
	return node;
}

/**
 * -------------------------------------------------------
 * Parameters: 	a node (Node*)
 * Returns: 	none
 * Description:	prints the contents of a node
 * 				invokes print_data
 * 				does not print next pointer
 * Assert:		n is not NULL
 * -------------------------------------------------------
 */
void print_node(Node *n) {
	assert(n);
	print_data(n->data);

	return;
}

/**
 * --------------------------------------------------------
 * Parameters: 	a node (Node*)
 * Returns: 	a copy node (Node*)
 * Description:	Creates a copy of the given node
 * 				The new copy has a copy version of the data
 * 				the next pointer points to the same node as the original node's next
 * Assert:		given node is not NULL
 * --------------------------------------------------------
 */
Node* copy_node(Node *n) {

	assert(n);
	return create_node(n->data,n->next);
}

/**
 * ---------------------------------------------------
 * Parameters:  a node (Node**)
 * Returns: 	none
 * Description:	destroys a node by:
 * 				- destroy the encompassed data
 * 				- setting next to NULL
 * 				- free the node pointer
 * Assert:		n and *n are not NULL
 * --------------------------------------------------
 */
void destroy_node(Node **n) {
	assert(n&&*n);
	destroy_data(&(*n)->data);
	(*n)->data=NULL;
	(*n)->next=NULL;
	free(*n);
	return;
}

//-----------------------------------------------------------
/**
 * Parameters: 	None
 * Returns: 	A pointer to linked list (List*)
 * Description:	Creates an empty linked list
 * 				head is set to NULL and size to 0
 * 				Returns a pointer to the newly created linked list
 * -----------------------------------------------------------
 */
List* create_list() {
	List *list = (List*)malloc(sizeof(list));
	list->head=NULL;
	list->size=0;
	return list;
}

/**
 * -------------------------------------------------------------------
 * Parameters: 	Pointer to a linked list (List*)
 * Returns: 	None
 * Description:	traverse through all nodes
 * 				uses print_node(Node*) to print contents of nodes
 * 				starting from list head to tail
 * 				node1-->node2-->node3-->...-->NULL
 * 				prints <NULL> if empty list
 * Assert:		list is not NULL
 * -------------------------------------------------------------------
 */
void print_list(List *list) {
	assert(list);
	Node *current_node = list->head;
	while(current_node!=NULL){
		print_node(current_node);
		printf("-->");
		current_node=current_node-> next;
	}
	printf("NULL\n");
	return;
}

/**
 * ---------------------------------------------------------------
 * Parameters: 	A linked list (List*)
 * 				A data item (Data*)
 * Returns: 	None
 * Description:	appends the given data item to the tail of the linked list
 * 				updates size and may update head
 * Assert		list and d are not NULL
 * ---------------------------------------------------
 */
void append_list(List *list, Data *d) {
	assert(list && d);
	Node *new_node = create_node(d, NULL);
	if (list->head ==NULL)
		list->head = new_node;
	else {
		Node *current_node = list->head;
		while (current_node->next != NULL)
			current_node = current_node->next;
		current_node->next = new_node;

	}
	list->size++;
	return;
}

/**
 * ---------------------------------------------------------------
 * Parameters: 	a linked list (List**)
 * Returns: 	None
 * Description:	Destroys a given linked list
 * 				Deletes all nodes (which takes care of destroying data)
 * 				set head to NULL and size to 0
 * 				free list pointer
 * Assert:		**list and *list are is not Null
 * ---------------------------------------------------------------
 */
void destroy_list(List **list) {
	while ((*list)->head!=NULL)
		    remove_item(*list);
		(*list)->head=NULL;
		(*list)->size=0;
		free(*list);
		*list = NULL;
		return;
}


void remove_item(List *list) {
	assert(list);
	if (list->head==NULL){
		printf("Error(remove_rear_list): list is empty\n");
		return;
	}

	Node *previous = NULL;
	Node *current = list->head;
	while (current->next!=NULL){
		previous =current;
		current = current->next;
	}

	if (list->size==1)
		list->head=NULL;
	else
		previous->next=NULL;

	destroy_node(&current);
	list->size--;
	return;
}



//------------------------- Assignment -------------------------
/**
 * -------------------------------------------------------------------------
 * Parameters: 	a linked list (List*)
 * 				a data item (Data*)
 * 				an index (int)
 * Returns: 	True/False
 * Description:	Inserts the given data item at position (index) at the linked list
 * 				if given index is out of range --> print an error and return NULL
 * 				returns True if insertion is successful, False otherwise
 * Assert:		given array and data pointers are not Null
 * -------------------------------------------------------------------------
 */
int insert_list(List *list, Data *d, int index) {
	assert(list && d);

	if (index < 0 || index > list->size) {
		printf("Error(insert_list): index out of range\n");
		return False;
	}

	if (list->size == 0) {
		Node *new_node = create_node(d, NULL);
		list->head = new_node;
		list->size++;

	} else if (index == list->size && index != 1) {
		Node *new_node = create_node(d, NULL);

		Node *current_node = list->head;
		while (current_node->next != NULL)
			current_node = current_node->next;
		current_node->next = new_node;
		list->size++;
	} else if (index == 0) {
		Node *new_node = create_node(d, list->head);
		list->head = new_node;
		list->size++;
	} else {

		Node *current_node = list->head;
		Node *previous = NULL;
		for (int i = 0; i < index; i++) {
			previous = current_node;
			current_node = current_node->next;
		}
		Node *new_node = create_node(d, current_node);
		previous->next = new_node;
		list->size++;
	}

	return True;
}

/**
 * -----------------------------------------------------------------
 * Parameters: 	list - a linked list (List*)
 * 				i - an index (int)
 * Returns: 	True/False
 * Description:	deletes the node at position (index) at the linked list
 * 				A copy of the data in the removed node is returned.
 * 				if given index is out of range --> print an error and return NULL
 * 				if given linked list is empty --> print an error and return NULL
 * Asserts:		given linked list is not NULL
 * ------------------------------------------------------------------
 */
Data* pop_list(List *list, int index) {
	assert(list);

	if (index < 0 || index > list->size-1) {
		if (list->head==NULL){
			printf("Error(pop_list): list is empty\n");
			return NULL;
		}
		printf("Error(pop_list): index out of range\n");
		return NULL;
	}

	if (list->size == 1) {
		Node *current = list->head;
		Data *item = copy_data(current->data);
		list->head = NULL;
		destroy_node(&current);
		list->size--;
		return item;

	} else if (index == list->size && index != 1) {
		//Node *previous = NULL;
		Node *current = list->head;
		while (current->next != NULL) {
			//previous = current;
			current = current->next;
		}
		Data *item = copy_data(current->data);
		destroy_node(&current);
		list->size--;
		return item;
	}else if (index ==0) {
		Node *current = list->head;
		Data *item = copy_data(current->data);
		list->head = list->head->next;
		destroy_node(&current);
		list->size--;
		return item;

	}
	else {

		Node *previous = NULL;
		Node *current = list->head;
		for (int i = 0; i < index; i++) {
			previous = current;
			current = current->next;
		}
		Data *item = copy_data(current->data);
		previous->next = current->next;
		destroy_node(&current);
		list->size--;
		return item;
	}


}

/**
 * ---------------------------------------------------------------------
 * Parameters: 	a linked List (List*)
 * 				start index (int)
 * 				end index  (int)
 * Returns: 	None
 * Description:	deletes items from the list from index start to end (inclusive both ends)
 * 				Updates head and size as necessary
 * 				if given list is empty, print error and return
 *				if given start or end indices are out of range --> print error msg and return
 * Assert:		linked list is not NULL
 * ---------------------------------------------------------------------
 */
void cut_list(List *list, int start, int end) {
	assert(list);
	if (list->size == 0) {
		printf("Error(cut_list): Linked List is empty\n");
		return;
	}
	if (start < 0 || start > list->size - 1) {
		printf("Error(cut_list): Invalid start index\n");
		return;
	}
	if (end < 0 || end > list->size - 1) {
		printf("Error(cut_list): Invalid end index\n");
		return;
	}

	if (start > end) {
		printf("Error(cut_list): Invalid end index\n");
		return;
	}

	Node *current_node = list->head;
	Node *delete = NULL;
	Node *previous = NULL;
	int i = 0;
	while (i < start) {
		previous = current_node;
		current_node = current_node->next;
		i++;
	}

	i = start;
	while (i <= end) {
		delete = current_node;
		current_node = current_node->next;
		destroy_node(&delete);
		list->size--;
		i++;
	}
	if (start == 0) {
		list->head = current_node;
	} else {
		previous->next = current_node;
	}
	return;
}

/**
 * ---------------------------------------------------------------------
 * Parameters: 	a linked list (List*)
 * 				start index (int)
 * 				end index  (int)
 * Returns: 	a linkedList (List*)
 * Description:	Constructs and returns a new linked list.
 * 				The new list contains elements from start to end (inclusive both ends)
 * 				if list is empty, print error msg and return empty list
 * 				if start/end is out of scope, print error msg and return empty list
 * 				Check if end index is greater than or requal to start index
 * Asserts:		list is not NULL
 * ---------------------------------------------------------------------
 */
List* sub_list(List *list, int start, int end) {
	assert(list);
	List* sub = NULL;
		sub = create_list();
	if (list->size == 0) {
		printf("Error(sub_list): Linked list is empty\n");
		return sub;
	}
	if (start < 0 || start > list->size - 1) {
		printf("Error(sub_list): Invalid start index\n");
		return sub;
	}
	if (end < 0 || end > list->size - 1) {
		printf("Error(sub_list): Invalid end index\n");
		return sub;
	}

	if (start > end) {
		printf("Error(sub_list): Invalid end index\n");
		return sub;
	}

	Node *current_node = list->head;
	int i = 0;
		while (i < start) {
			current_node = current_node->next;
			i++;
		}
		i = start;
		Data *data = NULL;

		while (i <=end){
			data = copy_data(current_node->data);
			//print_data(data);
			append_list(sub,data);
			current_node = current_node->next;
			i++;

		}



	return sub;
}

/**
 * ---------------------------------------------------------------------
 * Parameters: 	a pointer to a linked list (List*)
 * 				i - index of first item (int)
 * 				j - index of second item (int)
 * Returns: 	None
 * Description:	swaps items i and j in the list
 * 				if invalid i and j, print error msg and return
 * Asserts:		asserts given linked list is not Null
 * ---------------------------------------------------------------------
 */
void swap_list(List *list, int i, int j) {
	assert(list);
		if (list->size == 0) {
			printf("Error(swap_list): list is empty\n");
			return;
		}
		if (i < 0 || i > list->size - 1) {
			printf("Error (swap_list): Invalid value of i or j\n");
			return;
		}
		if (j < 0 || j > list->size - 1) {
			printf("Error (swap_list): Invalid value of i or j\n");
			return;
		}

		if (i ==j)
			return;



		Node* previous1 = NULL;
		Node* next = NULL;
		Node* next2 = NULL;
		Node* current1 = list->head;
		Node* previous2 = NULL;
		Node* current2 = NULL;


		if (i ==0 || j ==0){

			int x = 0;
		while (x < i) {
			current1 = current1->next;
			x++;
		}
		next = current1->next;
		current2 = list->head;
		while (x < j) {
			previous2 = current2;
			current2 = current2->next;

			x++;
		}
		next2 = current2->next;

		list->head = current2;
		previous2->next = current1;

		if (j - i == 1) {
			current2->next = current1;
		} else
			current2->next = next;
		current1->next = next2;




		}else{
			int x = 0;
			while (x < i){
				previous1 = current1;
				current1 = current1->next;
				x++;
			}
			next = current1->next;
			current2 = previous1;
			while (x <=j){
				previous2 = current2;
				current2 = current2->next;

				x++;
			}
			next2 = current2->next;

			previous1->next=current2;
			previous2->next = current1;

			if (j-i==1){
				current2->next = current1;
			}else
				current2->next = next;
			current1->next = next2;

//			print_data(current1->data);
//			print_data(current2->data);
//			printf("HI\n");


		}



	return;
}

/**
 * ---------------------------------------------------------------------
 * Parameters: 	first linked list (List*)
 * 				second linked list (List*)
 * Returns: 	new list (List*)
 * Description:	Creates a new list that contains items which appear in both lists
 * 				No duplicates allowed
 * Assert:		both linked lists are not NULL
 * ---------------------------------------------------------------------
 */
List* intersection_list(List *list1, List *list2) {
	assert(list1 && list2);
	List *list3 = NULL;

	list3 = create_list();

	Node* current1 = NULL;
	Node* current2 = NULL;
	Data*d = NULL;
	Data*d1 = NULL;
	Data*d2 = NULL;
	current1 = list1->head;
	current2=list2->head;
	if (list1->size == 0 || list2->size ==0){
		return list3;
	}

	while (current1!=NULL){
		while(current2!=NULL){
			d1 = copy_data(current1->data);
			d2 = copy_data(current2->data);

			if (compare_data(d1,d2)==0){
				d = copy_data(current2->data);
				append_list(list3,d);
			}
			current2 = current2->next;
		}
		current2=list2->head;
		current1 = current1->next;
	}


	return list3;
}
